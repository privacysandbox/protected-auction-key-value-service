#!/bin/bash
# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit
export TZ=Etc/UTC
export PS4='+\t $(basename ${BASH_SOURCE[0]}):${LINENO} ' # xtrace prompt

START=$(date +%s)
readonly START

trap _print_runtime EXIT
function _print_runtime() {
  local -r -i STATUS=$?
  local -r -i END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\nbuild_and_test_all_in_docker runtime: %'ds\n" $((END - START)) &>/dev/stderr
  if [[ ${STATUS} -eq 0 ]]; then
    printf "build_and_test_in_docker completed successfully\n" &>/dev/stderr
  else
    printf "Error: build_and_test_in_docker completed with status code: %s\n" "${STATUS}" &>/dev/stderr
  fi
  # kokoro has a habit of truncating build logs for scripts, adding a delay
  # seems to help ensure completeness
  if [[ -v KOKORO_ARTIFACTS_DIR ]]; then
    sleep 5s
  fi
  exit ${STATUS}
}

declare -i VERBOSE=0
declare -i PRECOMMIT_ONLY=0
declare -i SKIP_PRECOMMIT=0
declare -i RUN_TESTS=0
declare INSTANCE=local
declare PLATFORM=aws
declare MODE=prod

function usage() {
  local -r -i exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  ${BASH_SOURCE[0]} <options>
    --instance <type>            Instance can be local or aws. Default: ${INSTANCE}
    --platform <type>            Platform can be aws or local. Default: ${PLATFORM}
    --mode <type>                Mode can  be prod or nonprod. Default: ${MODE}
    --precommit-only             Run precommit then exit
    --no-precommit               Skip precommit checks
    --with-tests                 Also runs tests before building
    --verbose                    Enable verbose output

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
    EXTRA_DOCKER_RUN_ARGS        Additional arguments to pass to docker run invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

SCRIPT_DIR="$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"
readonly SCRIPT_DIR
# shellcheck disable=SC1090
source "${SCRIPT_DIR}"/../../builders/tools/builder.sh
# shellcheck disable=SC1090
source "${SCRIPT_DIR}"/lib_local_server.sh

while [[ $# -gt 0 ]]; do
  case "$1" in
    --precommit-only)
      PRECOMMIT_ONLY=1
      shift
      ;;
    --no-precommit)
      SKIP_PRECOMMIT=1
      shift
      ;;
    --with-tests)
      RUN_TESTS=1
      shift
      ;;
    --with-ami)
      printf -- "--with-ami flag has been removed. Instead use %s/production/packaging/aws/build_and_test.\n" "${WORKSPACE}" &>/dev/stderr
      usage
      ;;
    --instance)
      INSTANCE="$2"
      shift
      shift
      ;;
    --platform)
      PLATFORM="$2"
      shift
      shift
      ;;
    --mode)
      MODE="$2"
      shift
      shift
      ;;
    --verbose)
      VERBOSE=1
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --config=${INSTANCE}_instance --config=${PLATFORM}_platform --config=${MODE}_mode"

if [[ ${VERBOSE} -eq 1 ]]; then
  set -o xtrace
  CBUILD_ARGS="${CBUILD_ARGS} --verbose"
fi

if [[ ${SKIP_PRECOMMIT} -eq 0 ]]; then
  "${WORKSPACE}"/builders/tools/pre-commit
fi
if [[ ${PRECOMMIT_ONLY} -eq 1 ]]; then
  exit 0
fi

printf "==== build and test specified targets using bazel-debian ====\n"

CBUILD_ARGS="${CBUILD_ARGS} --seccomp-unconfined"

builder::cbuild_debian "
set -o errexit
trap _collect_logs EXIT
function _collect_logs() {
  declare -r -i status\$?
  declare -r filename=${INSTANCE}-${PLATFORM}-${MODE}-logs.zip
  printf 'Collecting bazel logs [%s]... [status: %d]\n' \${filename@Q} \${status} &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs \${filename}
  exit \${status}
}

# remove any existing test logs
bazel ${BAZEL_STARTUP_ARGS} info ${BAZEL_EXTRA_ARGS} bazel-testlogs 2>/dev/null | xargs rm -rf

bazel ${BAZEL_STARTUP_ARGS} build ${BAZEL_EXTRA_ARGS} //components/... //public/... //tools/...
if [[ ${RUN_TESTS} -ne 0 ]]; then
  printf 'Tests enabled. Running tests...'
  bazel ${BAZEL_STARTUP_ARGS} test ${BAZEL_EXTRA_ARGS} --build_tests_only //...
fi
if [[ ${PLATFORM} == gcp ]]; then
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/gcp/data_server:copy_to_dist
elif [[ ${PLATFORM} == local ]]; then
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/local/data_server:copy_to_dist
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/tools:copy_to_dist
else
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/aws/data_server:copy_to_dist
fi
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //testing/functionaltest:copy_to_dist
"

readonly DIST="${WORKSPACE}"/dist
if ! [[ -d ${DIST} ]]; then
  printf "dir not found: [%s]\n" "${DIST}"
else
  if [[ ${PLATFORM} == local ]]; then
    set -o xtrace
    declare sut_zip
    declare sut_name
    for sut_zip in "${DIST}"/test_data/*.zip; do
      sut_name="$(basename "${sut_zip}" .zip)"
      EXTRA_DOCKER_RUN_ARGS="--workdir /src/workspace/dist/test_data" \
        "${WORKSPACE}"/builders/tools/unzip -u -d "${sut_name}" "${sut_name}.zip"
      "${WORKSPACE}"/builders/tools/normalize-dist
      find "${DIST}/test_data/${sut_name}" -type d -exec chmod 755 {} \;
      find "${DIST}/test_data/${sut_name}" -mindepth 2 -type f -exec chmod 644 {} \;
    done
    docker load --input "${DIST}"/debian/server_docker_image.tar
    # local_server::run_and_test
  fi
  printf "build artifacts:\n"
  ls -lhR "${DIST}"
fi
