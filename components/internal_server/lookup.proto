// Copyright 2022 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package kv_server;

import "google/rpc/status.proto";
import "src/logger/logger.proto";

// Internal Lookup Service API.
service InternalLookupService {
  // Endpoint for querying the datastore over the network.
  rpc SecureLookup(SecureLookupRequest) returns (SecureLookupResponse) {}
}

// Lookup request for internal datastore.
message InternalLookupRequest {
  // List of keys to look up.
  repeated string keys = 1;
  // False means values are looked up.
  // True means value sets are looked up.
  bool lookup_sets = 2;
  // Context useful for logging and tracing requests
  privacy_sandbox.server_common.LogContext log_context = 3;
  // Consented debugging configuration
  privacy_sandbox.server_common.ConsentedDebugConfiguration consented_debug_config = 4;
}

// Encrypted and padded lookup request for internal datastore.
// We are sending out `num_shards` of these at the same time. Only payload size
// is observable from the outside. So it has to be the same, but the actual
// keys we are looking up can be different.
// If we padded `InternalLookupRequest`s, based of the total length of all keys
// we can end up having different _serialized_ message payload sizes, due to how
// the over wire format for protobuf is constructed.
// If we serialize InternalLookupRequest, and then pad the resulting string,
// then we are guarnteed to serialize to the same length.
message SecureLookupRequest {
  bytes ohttp_request = 1;
}

// Lookup response from internal datastore.
//
// Each key in the request has a corresponding map entry in the response.

// The value of the entry is a SingleLookupResult, which is either the value
// from the datastore, key set values or a status in case of an error.
//
// Examples of possible error scenarios:
// - Key is missing from internal datastore
// - Error during lookup from a sharded datastore
message InternalLookupResponse {
  map<string, SingleLookupResult> kv_pairs = 1;
}

// Encrypted InternalLookupResponse
message SecureLookupResponse {
  bytes ohttp_response = 1;
}

// Lookup result for a single key that is either a string value, key set values
// or a status.
message SingleLookupResult {
  oneof single_lookup_result {
    string value = 1;
    google.rpc.Status status = 2;
    KeysetValues keyset_values = 3;
    UInt32SetValues uint32set_values = 4;
    UInt64SetValues uint64set_values = 5;
  }
}

// Keyset values.
message KeysetValues {
  repeated string values = 1;
}

// UInt32 set values
message UInt32SetValues {
  repeated uint32 values = 1;
}

// UInt64 set values
message UInt64SetValues {
  repeated uint64 values = 1;
}

// Run Query request.
message InternalRunQueryRequest {
  // Query to run.
  optional string query = 1;
  // Context useful for logging and tracing requests
  privacy_sandbox.server_common.LogContext log_context = 2;
  // Consented debugging configuration
  privacy_sandbox.server_common.ConsentedDebugConfiguration consented_debug_config = 3;
}

// Run Query response.
message InternalRunQueryResponse {
  // Set of elements returned.
  repeated string elements = 1;
}

// Run Query request.
message InternalRunSetQueryUInt32Request {
  // Query to run.
  optional string query = 1;
  // Context useful for logging and tracing requests
  privacy_sandbox.server_common.LogContext log_context = 2;
  // Consented debugging configuration
  privacy_sandbox.server_common.ConsentedDebugConfiguration consented_debug_config = 3;
}

// Response for running a set query using sets of unsigned ints as input.
message InternalRunSetQueryUInt32Response {
  repeated uint32 elements = 1;
}

// Run Query request.
message InternalRunSetQueryUInt64Request {
  // Query to run.
  optional string query = 1;
  // Context useful for logging and tracing requests
  privacy_sandbox.server_common.LogContext log_context = 2;
  // Consented debugging configuration
  privacy_sandbox.server_common.ConsentedDebugConfiguration consented_debug_config = 3;
}

// Response for running a set query using sets of unsigned ints as input.
message InternalRunSetQueryUInt64Response {
  repeated uint64 elements = 1;
}
