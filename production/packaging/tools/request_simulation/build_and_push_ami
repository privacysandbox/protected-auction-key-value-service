#!/bin/bash
# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

START=$(date +%s)
readonly START

trap _print_runtime EXIT
function _print_runtime() {
  local -r -i STATUS=$?
  local -r -i END=$(date +%s)
  /usr/bin/env LC_ALL=en_US.UTF-8 printf "\nrequest_simulation/build_and_push_ami runtime: %'ds\n" $((END - START)) &>/dev/stderr
  if [[ ${STATUS} -eq 0 ]]; then
    printf "request_simulation/build_and_push_ami completed successfully\n" &>/dev/stderr
  else
    printf "Error: request_simulation/build_and_push_ami completed with status code: %s\n" "${STATUS}" &>/dev/stderr
  fi
  exit ${STATUS}
}

function usage() {
  local exitval=${1-1}
  cat &>/dev/stderr <<USAGE
usage:
  $0 <options>
    --with-ami                   AMI region in which to build and store AWS AMIs. Use multiple times to specify more than one region
                                 If empty, none will be built

environment variables (all optional):
    WORKSPACE                    Set the path to the workspace (repo root)
    BAZEL_STARTUP_ARGS           Additional startup arguments to pass to bazel invocations
    BAZEL_EXTRA_ARGS             Additional command arguments to pass to bazel invocations
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

declare -a AMI_REGIONS

while [[ $# -gt 0 ]]; do
  case "$1" in
    --with-ami)
      AMI_REGIONS+=("$2")
      shift 2 || usage
      ;;
    -h | --help) usage 0 ;;
    *) usage ;;
  esac
done

function arr_to_string_list() {
  declare -r -n arr=$1
  printf -v joined '"%s",' "${arr[@]}"
  printf "[%s]" "${joined%,}"
}

# Exit 1 on any error before pushing to origin.
function fail() {
  printf "\n\n[ERROR]: Failure: %s\n\n" "$@"
  sleep 5s  # Make sure that stdout has time to be written
  exit 1
}

printf "==== Sourcing builder.sh =====\n"
# We can't use $WORKSPACE here as it may not be set - it'll be created
# by builder.sh if it's empty.
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly SCRIPT_DIR
BUILDER="${SCRIPT_DIR}"/../../../../builders/tools/builder.sh
readonly BUILDER
if [[ ! -f ${BUILDER} ]]; then
  ERROR_MESSAGE=$(printf "builder.sh file does not exist, expected at: %s\n"  "${BUILDER}")
  fail "$ERROR_MESSAGE"
fi
# shellcheck source=builders/tools/builder.sh
source "${BUILDER}" || fail "Failed to source builder.sh"
readonly DIST="${WORKSPACE}"/dist

printf "==== Creating dist dir =====\n"
DIST_DIR="${DIST}"/request_simulation/aws
readonly DIST_DIR
mkdir -p "${DIST_DIR}"
chmod 770 "${DIST_DIR}"

printf "==== build AWS artifacts using bazel-debian =====\n"
BAZEL_EXTRA_ARGS="${BAZEL_EXTRA_ARGS} --config=aws_instance --config=aws_platform"
printf "EXTRA ARGS: %s\n" "${BAZEL_EXTRA_ARGS}"

printf "==== Copying to dist for aws artifacts =====\n"
builder::cbuild_al2023 $"
trap _collect_logs EXIT
function _collect_logs() {
  local -r -i STATUS=\$?
  printf 'Collecting bazel logs...\n' &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  exit \${STATUS}
}
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/tools/request_simulation/ami:copy_to_dist
"

unzip -o "$DIST_DIR"/aws_artifacts.zip -d "$DIST_DIR"

printf "==== Copying to dist for the request_simulation artifacts=====\n"
builder::cbuild_debian $"
trap _collect_logs EXIT
function _collect_logs() {
  local -r -i STATUS=\$?
  printf 'Collecting bazel logs...\n' &>/dev/stderr
  bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //:collect-logs
  exit \${STATUS}
}
set -o errexit
bazel ${BAZEL_STARTUP_ARGS} run ${BAZEL_EXTRA_ARGS} //production/packaging/tools/request_simulation:copy_to_dist
"

printf "==== Running normalize_dist.sh =====\n"
if ! [[ -r ${WORKSPACE}/builders/tools/normalize-dist && -x ${WORKSPACE}/builders/tools/normalize-dist ]]; then
  printf "normalize_dist.sh file does not exist, expected at: %s/builders/tools/normalize-dist\n"  "${WORKSPACE}" &>/dev/stderr
  fail "normalize_dist.sh does not exist"
fi
"${WORKSPACE}"/builders/tools/normalize-dist || { fail "Unable to run normalize-dist"; }

if [[ -n ${AMI_REGIONS[0]} ]]; then
  printf "==== build AWS AMI (using packer) =====\n"
  regions="$(arr_to_string_list AMI_REGIONS)"
  builder::cbuild_al2023 "
set -o errexit
packer build -var=regions='${regions}' -var=commit_version=$(git rev-parse HEAD) -var=distribution_dir=dist/request_simulation/aws -var=workspace=/src/workspace production/packaging/tools/request_simulation/ami/image.pkr.hcl
"
fi
