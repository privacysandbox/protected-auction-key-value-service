diff --git a/riegeli/records/BUILD b/riegeli/records/BUILD
index 2b5d9d4c..200714e6 100644
--- a/riegeli/records/BUILD
+++ b/riegeli/records/BUILD
@@ -1,5 +1,5 @@
-load("@com_google_protobuf//bazel:cc_proto_library.bzl", "cc_proto_library")
-load("@com_google_protobuf//bazel:proto_library.bzl", "proto_library")
+load("@rules_cc//cc:defs.bzl", "cc_proto_library")
+load("@rules_proto//proto:defs.bzl", "proto_library")

 package(
     default_visibility = ["//visibility:public"],
diff --git a/third_party/BUILD b/third_party/BUILD
new file mode 100644
index 00000000..1cc8bddd
--- /dev/null
+++ b/third_party/BUILD
@@ -0,0 +1,13 @@
+package(
+    default_visibility = ["//visibility:public"],
+    features = ["header_modules"],
+)
+
+licenses(["notice"])
+
+exports_files([
+    "highwayhash.BUILD",
+    "net_zstd.BUILD",
+    "six.BUILD",
+    "zlib.BUILD",
+])
diff --git a/third_party/highwayhash.BUILD b/third_party/highwayhash.BUILD
new file mode 100644
index 00000000..37c7a5d3
--- /dev/null
+++ b/third_party/highwayhash.BUILD
@@ -0,0 +1,291 @@
+package(
+    default_visibility = ["//visibility:public"],
+    features = ["header_modules"],
+)
+
+licenses(["notice"])
+
+config_setting(
+    name = "haswell",
+    values = {"cpu": "haswell"},
+)
+
+config_setting(
+    name = "k8",
+    values = {"cpu": "k8"},
+)
+
+config_setting(
+    name = "cpu_ppc",
+    values = {"cpu": "ppc"},
+)
+
+config_setting(
+    name = "cpu_aarch64",
+    values = {"cpu": "aarch64"},
+)
+
+#-----------------------------------------------------------------------------
+# Platform-specific
+
+cc_library(
+    name = "compiler_specific",
+    hdrs = ["highwayhash/compiler_specific.h"],
+)
+
+cc_library(
+    name = "arch_specific",
+    srcs = ["highwayhash/arch_specific.cc"],
+    hdrs = ["highwayhash/arch_specific.h"],
+    deps = [":compiler_specific"],
+)
+
+cc_library(
+    name = "endianess",
+    hdrs = ["highwayhash/endianess.h"],
+)
+
+cc_library(
+    name = "instruction_sets",
+    srcs = ["highwayhash/instruction_sets.cc"],
+    hdrs = ["highwayhash/instruction_sets.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+    ],
+)
+
+cc_library(
+    name = "iaca",
+    hdrs = ["highwayhash/iaca.h"],
+    deps = [":compiler_specific"],
+)
+
+cc_library(
+    name = "os_specific",
+    srcs = ["highwayhash/os_specific.cc"],
+    hdrs = ["highwayhash/os_specific.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+    ],
+)
+
+#-----------------------------------------------------------------------------
+# Vectors
+
+cc_library(
+    name = "scalar",
+    textual_hdrs = ["highwayhash/scalar.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+    ],
+)
+
+cc_library(
+    name = "vector128",
+    textual_hdrs = ["highwayhash/vector128.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+    ],
+)
+
+cc_library(
+    name = "vector256",
+    textual_hdrs = ["highwayhash/vector256.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+    ],
+)
+
+#-----------------------------------------------------------------------------
+# SipHash
+
+cc_library(
+    name = "sip_hash",
+    srcs = ["highwayhash/sip_hash.cc"],
+    hdrs = [
+        "highwayhash/sip_hash.h",
+        "highwayhash/state_helpers.h",
+    ],
+    visibility = ["//visibility:public"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":endianess",
+    ],
+)
+
+#-----------------------------------------------------------------------------
+# HighwayHash
+
+cc_library(
+    name = "hh_types",
+    hdrs = ["highwayhash/hh_types.h"],
+    deps = [":instruction_sets"],
+)
+
+cc_library(
+    name = "load3",
+    textual_hdrs = ["highwayhash/load3.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":endianess",
+    ],
+)
+
+cc_library(
+    name = "hh_avx2",
+    srcs = ["highwayhash/hh_avx2.cc"],
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    copts = select({
+        ":k8": ["-mavx2"],
+        ":haswell": ["-mavx2"],
+        "//conditions:default": ["-DHH_DISABLE_TARGET_SPECIFIC"],
+    }),
+    textual_hdrs = [
+        "highwayhash/hh_avx2.h",
+        "highwayhash/highwayhash_target.cc",
+        "highwayhash/highwayhash.h",
+        "highwayhash/hh_buffer.h",
+    ],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":iaca",
+        ":load3",
+        ":vector128",
+        ":vector256",
+    ],
+)
+
+cc_library(
+    name = "hh_sse41",
+    srcs = ["highwayhash/hh_sse41.cc"],
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    copts = select({
+        ":k8": ["-msse4.1"],
+        ":haswell": ["-msse4.1"],
+        "//conditions:default": ["-DHH_DISABLE_TARGET_SPECIFIC"],
+    }),
+    textual_hdrs = [
+        "highwayhash/hh_sse41.h",
+        "highwayhash/highwayhash_target.cc",
+        "highwayhash/highwayhash.h",
+        "highwayhash/hh_buffer.h",
+    ],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":iaca",
+        ":load3",
+        ":vector128",
+    ],
+)
+
+cc_library(
+    name = "hh_neon",
+    srcs = [
+        "highwayhash/hh_neon.cc",
+        "highwayhash/vector_neon.h",
+    ],
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    copts = select({
+        ":cpu_aarch64": [],
+        "//conditions:default": ["-DHH_DISABLE_TARGET_SPECIFIC"],
+    }),
+    textual_hdrs = [
+        "highwayhash/highwayhash_target.cc",
+        "highwayhash/highwayhash.h",
+        "highwayhash/hh_buffer.h",
+        "highwayhash/hh_neon.h",
+    ],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":load3",
+    ],
+)
+
+cc_library(
+    name = "hh_vsx",
+    srcs = ["highwayhash/hh_vsx.cc"],
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    textual_hdrs = [
+        "highwayhash/highwayhash_target.cc",
+        "highwayhash/highwayhash.h",
+        "highwayhash/hh_buffer.h",
+        "highwayhash/hh_vsx.h",
+    ],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":load3",
+    ],
+)
+
+cc_library(
+    name = "hh_portable",
+    srcs = ["highwayhash/hh_portable.cc"],
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    textual_hdrs = [
+        "highwayhash/hh_portable.h",
+        "highwayhash/highwayhash_target.cc",
+        "highwayhash/highwayhash.h",
+        "highwayhash/hh_buffer.h",
+    ],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":iaca",
+        ":load3",
+        ":scalar",
+    ],
+)
+
+# For users of the HighwayHashT template
+cc_library(
+    name = "highwayhash",
+    hdrs = ["highwayhash/highwayhash.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_types",
+        ":hh_portable",
+    ] + select({
+        ":cpu_ppc": [":hh_vsx"],
+        ":cpu_aarch64": [":hh_neon"],
+        "//conditions:default": [
+            ":hh_avx2",
+            ":hh_sse41",
+            ":iaca",
+        ],
+    }),
+)
+
+# For users of InstructionSets<HighwayHash> runtime dispatch
+cc_library(
+    name = "highwayhash_dynamic",
+    hdrs = ["highwayhash/highwayhash_target.h"],
+    deps = [
+        ":arch_specific",
+        ":compiler_specific",
+        ":hh_portable",
+        ":hh_types",
+    ] + select({
+        ":cpu_aarch64": [":hh_neon"],
+        "//conditions:default": [
+            ":hh_avx2",
+            ":hh_sse41",
+        ],
+    }),
+)
diff --git a/third_party/net_zstd.BUILD b/third_party/net_zstd.BUILD
new file mode 100644
index 00000000..4bd4c296
--- /dev/null
+++ b/third_party/net_zstd.BUILD
@@ -0,0 +1,19 @@
+package(
+    default_visibility = ["//visibility:public"],
+    features = ["header_modules"],
+)
+
+licenses(["notice"])
+
+cc_library(
+    name = "zstdlib",
+    srcs = glob([
+        "common/*.c",
+        "common/*.h",
+        "compress/*.c",
+        "compress/*.h",
+        "decompress/*.c",
+        "decompress/*.h",
+    ]),
+    hdrs = ["zstd.h"],
+)
diff --git a/third_party/snappy.BUILD b/third_party/snappy.BUILD
new file mode 100644
index 00000000..fd18aa5a
--- /dev/null
+++ b/third_party/snappy.BUILD
@@ -0,0 +1,92 @@
+package(
+    default_visibility = ["//visibility:public"],
+    features = ["header_modules"],
+)
+
+licenses(["notice"])
+
+cc_library(
+    name = "snappy",
+    srcs = [
+        "config.h",
+        "snappy.cc",
+        "snappy-internal.h",
+        "snappy-sinksource.cc",
+        "snappy-stubs-internal.cc",
+        "snappy-stubs-internal.h",
+        "snappy-stubs-public.h",
+    ],
+    hdrs = [
+        "snappy.h",
+        "snappy-sinksource.h",
+    ],
+    copts = [
+        "-DHAVE_CONFIG_H",
+        "-Wno-sign-compare",
+    ],
+)
+
+genrule(
+    name = "config_h",
+    outs = ["config.h"],
+    cmd = "\n".join([
+        "cat <<'EOF' >$@",
+        "#define HAVE_STDDEF_H 1",
+        "#define HAVE_STDINT_H 1",
+        "",
+        "#ifdef __has_builtin",
+        "#  if !defined(HAVE_BUILTIN_EXPECT) && __has_builtin(__builtin_expect)",
+        "#    define HAVE_BUILTIN_EXPECT 1",
+        "#  endif",
+        "#  if !defined(HAVE_BUILTIN_CTZ) && __has_builtin(__builtin_ctzll)",
+        "#    define HAVE_BUILTIN_CTZ 1",
+        "#  endif",
+        "#elif defined(__GNUC__) && (__GNUC__ > 3 || __GNUC__ == 3 && __GNUC_MINOR__ >= 4)",
+        "#  ifndef HAVE_BUILTIN_EXPECT",
+        "#    define HAVE_BUILTIN_EXPECT 1",
+        "#  endif",
+        "#  ifndef HAVE_BUILTIN_CTZ",
+        "#    define HAVE_BUILTIN_CTZ 1",
+        "#  endif",
+        "#endif",
+        "",
+        "#ifdef __has_include",
+        "#  if !defined(HAVE_BYTESWAP_H) && __has_include(<byteswap.h>)",
+        "#    define HAVE_BYTESWAP_H 1",
+        "#  endif",
+        "#  if !defined(HAVE_UNISTD_H) && __has_include(<unistd.h>)",
+        "#    define HAVE_UNISTD_H 1",
+        "#  endif",
+        "#  if !defined(HAVE_SYS_ENDIAN_H) && __has_include(<sys/endian.h>)",
+        "#    define HAVE_SYS_ENDIAN_H 1",
+        "#  endif",
+        "#  if !defined(HAVE_SYS_MMAN_H) && __has_include(<sys/mman.h>)",
+        "#    define HAVE_SYS_MMAN_H 1",
+        "#  endif",
+        "#  if !defined(HAVE_SYS_UIO_H) && __has_include(<sys/uio.h>)",
+        "#    define HAVE_SYS_UIO_H 1",
+        "#  endif",
+        "#endif",
+        "",
+        "#ifndef SNAPPY_IS_BIG_ENDIAN",
+        "#  ifdef __s390x__",
+        "#    define SNAPPY_IS_BIG_ENDIAN 1",
+        "#  elif defined(__BYTE_ORDER__) && defined(__ORDER_BIG_ENDIAN__) && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__",
+        "#    define SNAPPY_IS_BIG_ENDIAN 1",
+        "#  endif",
+        "#endif",
+        "EOF",
+    ]),
+)
+
+genrule(
+    name = "snappy_stubs_public_h",
+    srcs = ["snappy-stubs-public.h.in"],
+    outs = ["snappy-stubs-public.h"],
+    cmd = ("sed " +
+           "-e 's/$${\\(.*\\)_01}/\\1/g' " +
+           "-e 's/$${SNAPPY_MAJOR}/1/g' " +
+           "-e 's/$${SNAPPY_MINOR}/1/g' " +
+           "-e 's/$${SNAPPY_PATCHLEVEL}/4/g' " +
+           "$< >$@"),
+)
