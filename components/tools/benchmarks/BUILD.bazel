# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library", "cc_test")

package(default_visibility = [
    "//production:__subpackages__",
])

cc_library(
    name = "benchmark_util",
    srcs = ["benchmark_util.cc"],
    hdrs = ["benchmark_util.h"],
    deps = [
        "//public/data_loading:records_utils",
        "//public/data_loading/writers:delta_record_stream_writer",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
        "@google_privacysandbox_servers_common//src/logger:request_context_impl",
    ],
)

cc_test(
    name = "benchmark_util_test",
    size = "small",
    srcs = ["benchmark_util_test.cc"],
    deps = [
        ":benchmark_util",
        "//public/data_loading/readers:delta_record_stream_reader",
        "@com_google_absl//absl/status:statusor",
        "@com_google_googletest//:gtest_main",
    ],
)

cc_binary(
    name = "data_loading_benchmark",
    srcs = ["data_loading_benchmark.cc"],
    malloc = "@com_google_tcmalloc//tcmalloc",
    deps = [
        ":benchmark_util",
        "//components/data/blob_storage:blob_storage_client",
        "//components/data_server/cache",
        "//components/data_server/cache:key_value_cache",
        "//components/data_server/cache:noop_key_value_cache",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "//public/data_loading:data_loading_fbs",
        "//public/data_loading:records_utils",
        "//public/data_loading/readers:riegeli_stream_io",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_benchmark//:benchmark",
    ],
)

cc_binary(
    name = "cache_benchmark",
    srcs = ["cache_benchmark.cc"],
    malloc = "@com_google_tcmalloc//tcmalloc",
    deps = [
        ":benchmark_util",
        "//components/data_server/cache",
        "//components/data_server/cache:key_value_cache",
        "//components/data_server/cache:noop_key_value_cache",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:request_context",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/strings",
        "@com_google_absl//absl/time",
        "@com_google_benchmark//:benchmark",
    ],
)

cc_binary(
    name = "query_evaluation_benchmark",
    srcs = ["query_evaluation_benchmark.cc"],
    malloc = "@com_google_tcmalloc//tcmalloc",
    deps = [
        ":benchmark_util",
        "//components/data_server/cache:get_key_value_set_result_impl",
        "//components/data_server/cache:key_value_cache",
        "//components/data_server/cache:uint_value_set",
        "//components/query:ast",
        "//components/query:driver",
        "//components/query:scanner",
        "//components/query:sets",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:request_context",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/functional:any_invocable",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
        "@com_google_benchmark//:benchmark",
    ],
)
