# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@container_structure_test//:defs.bzl", "container_structure_test")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")
load(
    "@rules_pkg//pkg:mappings.bzl",
    "pkg_attributes",
    "pkg_files",
)
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_pkg//pkg:zip.bzl", "pkg_zip")

package(default_visibility = [
    "//production/packaging:__subpackages__",
])

pkg_files(
    name = "server_executables",
    srcs = [
        "//components/data_server/server",
        "//production/packaging/gcp/data_server/bin:init_server_basic",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/",
)

server_binaries = [
    ":server_executables",
]

pkg_zip(
    name = "server_binaries",
    srcs = server_binaries,
)

pkg_tar(
    name = "server_binaries_tar",
    srcs = server_binaries,
)

pkg_files(
    name = "envoy_executables",
    srcs = [
        "@envoy_binary//file",
    ],
    attributes = pkg_attributes(mode = "0555"),
    prefix = "/usr/local/bin",
)

pkg_tar(
    name = "envoy_binary_tar",
    srcs = [":envoy_executables"],
)

pkg_files(
    name = "etc_envoy_files",
    srcs = [
        "envoy/envoy.yaml",
        "//public/query:query_api_descriptor_set",
    ],
    attributes = pkg_attributes(mode = "0444"),
    prefix = "/etc/envoy",
    visibility = [
        "//production/packaging:__subpackages__",
    ],
)

pkg_tar(
    name = "envoy_config_tar",
    srcs = [
        ":etc_envoy_files",
    ],
)

oci_image(
    name = "server_docker_image",
    base = select({
        "@platforms//cpu:arm64": "@runtime-debian-debug-root-arm64",
        "@platforms//cpu:x86_64": "@runtime-debian-debug-root-amd64",
    }),
    entrypoint = [
        "/init_server_basic",
        # These affect image digest, so changing these would result in the loss of ability to communicate with
        # the downstream components
        "--public_key_endpoint=https://publickeyservice-a.pa-3.gcp.privacysandboxservices.com/.well-known/protected-auction/v1/public-keys",
        "--stderrthreshold=0",
    ],
    env = {
        "GRPC_DNS_RESOLVER": "native",
    },
    exposed_ports = [
        "50050/tcp",
        "50051/tcp",
        "50100/tcp",
        "51052/tcp",
    ],
    labels = {"tee.launch_policy.log_redirect": "debugonly"},
    tars = [
        ":server_binaries_tar",
        ":envoy_binary_tar",
        ":envoy_config_tar",
    ],
)

oci_load(
    name = "server_docker_tarball",
    image = ":server_docker_image",
    repo_tags = ["bazel/production/packaging/gcp/data_server:server_docker_image"],
)

filegroup(
    name = "server_docker_tarball.tar",
    srcs = [":server_docker_tarball"],
    output_group = "tarball",
)

container_structure_test(
    name = "structure_test",
    size = "medium",
    configs = ["test/structure.yaml"],
    driver = "tar",
    image = ":server_docker_tarball.tar",
)

container_structure_test(
    name = "commands_test",
    size = "small",
    configs = ["test/commands.yaml"],
    driver = "docker",
    image = ":server_docker_image",
)

# server artifacts
pkg_zip(
    name = "server_artifacts",
    srcs = server_binaries,
)

genrule(
    name = "copy_to_dist",
    srcs = [
        ":server_artifacts",
        ":server_docker_tarball.tar",
        "//public/query:query_api_descriptor_set",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat << EOF > '$@'
mkdir -p dist/debian
cp $(execpath :server_artifacts) dist/debian
cp $(execpath :server_docker_tarball.tar) dist/server_docker_image.tar
cp $(execpath //public/query:query_api_descriptor_set) dist
# retain previous server_docker_image.tar location as a symlink
ln -rsf dist/server_docker_image.tar dist/debian/server_docker_image.tar
builders/tools/normalize-dist
EOF""",
    executable = True,
    local = True,
    message = "copying server artifacts to dist/debian directory",
)
