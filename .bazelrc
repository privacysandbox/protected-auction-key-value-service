build --announce_rc
build --verbose_failures
build --compilation_mode=opt
build --output_filter='^//((?!(third_party):).)*$'
build --color=yes
build --workspace_status_command="bash tools/get_workspace_status"
build --copt=-Werror=thread-safety
build --config=clang
build --config=noexcept

# Disable some ROMA error checking
build --per_file_copt=.*sandboxed_api.*@-Wno-return-type

build:run_all_tests --cache_test_results=no
test:run_all_tests --test_verbose_timeout_warnings

# Broadly disable C++ Exceptions
# https://google.github.io/styleguide/cppguide.html#Exceptions
build:noexcept --copt=-fno-exceptions
# Grant exceptions to some dependencies so they can use exceptions
build:noexcept --per_file_copt=.*boost.*@-fexceptions
build:noexcept --per_file_copt=.*src/aws/proxy.*@-fexceptions
build:noexcept --per_file_copt=.*src/roma.*@-fexceptions
build:noexcept --per_file_copt=.*oneTBB.*@-fexceptions
build:noexcept --per_file_copt=.*com_github_nghttp2_nghttp2.*@-fexceptions
build:noexcept --per_file_copt=.*src/core.*@-fexceptions
build:noexcept --per_file_copt=.*src/cpio.*@-fexceptions

test --test_output=errors
# Disable ICU linking for googleurl.
build --@com_google_googleurl//build_config:system_icu=0
build --@io_opentelemetry_cpp//api:with_abseil=true
# Required to build OpenTelemtry with logs API.
build --copt=-DENABLE_LOGS_PREVIEW

build:clang --cxxopt=-fbracket-depth=512
build:clang --client_env=CC=clang
build:clang --cxxopt=-std=c++17
build:clang --host_cxxopt=-std=c++17
build:clang --client_env=BAZEL_CXXOPTS=-std=c++17
build:clang --per_file_copt=external/nitrokmscli_.*\.c@-Wno-int-conversion
build:clang --per_file_copt=external/(json_c|nitrokmscli_).*\.c@-Wno-implicit-function-declaration
# Ignore deprecated declarations and redefined macro warnings from differential privacy library
build:clang --per_file_copt=(components|public/data_loading)/.*@-Wno-macro-redefined,-Wno-deprecated-declarations
build:clang --per_file_copt=production/packaging/gcp/data_server/bin/.*@-Wno-macro-redefined,-Wno-deprecated-declarations
build:clang --per_file_copt=tools/(data_cli|request_simulation|udf)/.*@-Wno-macro-redefined,-Wno-deprecated-declarations
# Use --host_per_file_copt to ignore warnings from genrule
build:clang --host_per_file_copt=(components|public/data_loading)/.*@-Wno-macro-redefined,-Wno-deprecated-declarations
build:clang --host_per_file_copt=production/packaging/gcp/data_server/bin/.*@-Wno-macro-redefined,-Wno-deprecated-declarations
build:clang --host_per_file_copt=tools/(data_cli|request_simulation|udf)/.*@-Wno-macro-redefined,-Wno-deprecated-declarations

build:cpp_nowarn --copt=-Werror
build:cpp_nowarn --per_file_copt=external/.*@-Wno-error

build:clang-tidy --aspects @bazel_clang_tidy//clang_tidy:clang_tidy.bzl%clang_tidy_aspect
build:clang-tidy --output_groups=report
build:clang-tidy --@bazel_clang_tidy//:clang_tidy_config=//:clang_tidy_config

# Required to use protos in wasm_cc_binary/inline_wasm_cc_binary
build:emscripten --per_file_copt=.*zlib.*@-Wno-deprecated-non-prototype
build:emscripten --per_file_copt=.*utf8_range.*@-Wno-unused-function
build:emscripten --per_file_copt=.*protobuf.*@-Wno-deprecated-declarations

# Address sanitizer, set action_env to segregate cache entries
build:asan --action_env=PRIVACY_SANDBOX_SERVERS_ASAN=1
build:asan --strip=never
build:asan --compilation_mode=dbg
build:asan --copt=-fsanitize=address
build:asan --copt=-DADDRESS_SANITIZER
build:asan --copt=-O1
build:asan --copt=-g
build:asan --copt=-fno-omit-frame-pointer
build:asan --linkopt=-fsanitize=address
build:asan --linkopt=-fuse-ld=lld
build:asan --action_env=ASAN_OPTIONS=detect_leaks=1:color=always

# Thread sanitizer, set action_env to segregate cache entries
build:tsan --strip=never
build:tsan --copt=-fsanitize=thread
build:tsan --copt=-DTHREAD_SANITIZER
build:tsan --copt=-DDYNAMIC_ANNOTATIONS_ENABLED=1
build:tsan --copt=-DDYNAMIC_ANNOTATIONS_EXTERNAL_IMPL=1
build:tsan --copt=-O1
build:tsan --copt=-fno-omit-frame-pointer
build:tsan --linkopt=-fsanitize=thread

# Memory sanitizer, set action_env to segregate cache entries
build:msan --strip=never
build:msan --copt=-fsanitize=memory
build:msan --copt=-DADDRESS_SANITIZER
build:msan --copt=-O1
build:msan --copt=-fno-omit-frame-pointer
build:msan --linkopt=-fsanitize=memory

# Undefined Behavior sanitizer, set action_env to segregate cache entries
build:ubsan --strip=never
build:ubsan --copt=-fsanitize=undefined
build:ubsan --copt=-O1
build:ubsan --copt=-fno-omit-frame-pointer
build:ubsan --linkopt:-fsanitize=undefined
build:ubsan --linkopt=-lubsan

# --config local_instance: builds assuming the instance is local
build:local_instance --//:instance=local
build:local_instance --@google_privacysandbox_servers_common//:instance=local

# --config aws_instance: builds assuming the instance is on AWS
build:aws_instance --//:instance=aws
build:aws_instance --@google_privacysandbox_servers_common//:instance=aws

# --config gcp_instance: builds assuming the instance is on GCP
build:gcp_instance --//:instance=gcp
build:gcp_instance --@google_privacysandbox_servers_common//:instance=gcp

# --config local_platform: builds the service to run locally
build:local_platform --//:platform=local

# --config aws_platform: builds the service to run with AWS
build:aws_platform --//:platform=aws
build:aws_platform --@google_privacysandbox_servers_common//:platform=aws

# --config gcp_platform: builds the service to run with GCP
build:gcp_platform --//:platform=gcp
build:gcp_platform --@google_privacysandbox_servers_common//:platform=gcp

# --config prod_mode: builds the service in prod mode
build:prod_mode --//:mode=prod
build:prod_mode --@google_privacysandbox_servers_common//:build_flavor=prod

# --config nonprod_mode: builds the service in nonprod mode
build:nonprod_mode --//:mode=nonprod
build:nonprod_mode --@google_privacysandbox_servers_common//:build_flavor=non_prod

try-import %workspace%/builders/.coverage.bazelrc
coverage --test_tag_filters=-nocoverage
coverage --test_size_filters=-enormous
