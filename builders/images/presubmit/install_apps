#!/bin/bash

# Copyright 2022 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

set -o pipefail
set -o errexit

declare -i VERBOSE=0

usage() {
  local exitval=${1-1}
  cat >&2 << USAGE
usage:
  $0 <options>
    --verbose                     Emit verbose info. Default: false
USAGE
  # shellcheck disable=SC2086
  exit ${exitval}
}

while [[ $# -gt 0 ]]; do
  case "$1" in
    --verbose)
      VERBOSE=1
      set -o xtrace
      shift
      ;;
    -h | --help) usage 0 ;;
    *) usage 0 ;;
  esac
done

SCRIPT_DIR="$(dirname "$(readlink -f "$0")")"
readonly SCRIPT_DIR

function apt_update() {
  apt-get --quiet -o 'Acquire::https::No-Cache=True' -o 'Acquire::http::No-Cache=True' update
}

function install_packages() {
  DEBIAN_FRONTEND=noninteractive apt-get --quiet install -y --no-install-recommends \
    apt-transport-https="2.7.*" \
    ca-certificates \
    libcurl4t64="8.5.*" \
    curl="8.5.*" \
    lsb-release="12.0*" \
    openjdk-11-jre="11.0.*" \
    python3.12-venv="3.12.*" \
    shellcheck="0.9.*" \
    software-properties-common="0.99.*" \
    wget="1.21.*"
  update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.12 100
}

# Install Docker (https://docs.docker.com/engine/install/debian/)
function install_docker() {
  apt-get --quiet remove docker docker.io containerd runc
  local -r KEYRING_DIR=/etc/apt/keyrings
  mkdir -p "${KEYRING_DIR}"
  local -r DIST=ubuntu
  curl --silent --fail --show-error --location https://download.docker.com/linux/${DIST}/gpg \
    | /usr/bin/gpg --dearmor -o "${KEYRING_DIR}"/docker.gpg
  local -r LSB_RELEASE="$(/usr/bin/lsb_release -cs)"
  echo "deb [arch=${ARCH} signed-by=${KEYRING_DIR}/docker.gpg] https://download.docker.com/linux/${DIST} ${LSB_RELEASE} stable" \
    | tee /etc/apt/sources.list.d/docker.list
  apt_update
  DEBIAN_FRONTEND=noninteractive apt-get --quiet install -y docker-ce docker-ce-cli containerd.io
}

function install_precommit() {
  /usr/bin/python3.12 -m venv "${PRE_COMMIT_VENV_DIR}"
  "${PRE_COMMIT_VENV_DIR}"/bin/pip install \
    pre-commit~=4.0 \
    pylint~=3.1
  "${PRE_COMMIT_TOOL}" --version

  # initialize pre-commit cache, which needs a git repo (a temporary will suffice)
  local -r GIT_REPO="$(mktemp -d)"
  git init "${GIT_REPO}"
  cd "${GIT_REPO}"
  # run pre-commit with no files in scope to only trigger population of the cache
  {
    cat "${SCRIPT_DIR}"/.pre-commit-config.yaml
    printf "\nfiles: ^$\n"
  } > .pre-commit-config.yaml
  git add .pre-commit-config.yaml
  "${PRE_COMMIT_TOOL}" run --config .pre-commit-config.yaml || true
  rm -rf "${GIT_REPO}"
}

function cleanup() {
  apt-get --quiet autoremove -y
  apt-get autoclean
  apt-get clean
  rm -rf /var/lib/apt/lists
  cd /
  go clean -cache -modcache
}

if [[ ${VERBOSE} -eq 1 ]]; then
  printf "=== SHELL ENVIRONMENT ===\n"
  env
fi

ARCH=$(dpkg --print-architecture)
readonly ARCH

apt_update
install_packages

# shellcheck disable=SC1090
. "${SCRIPT_DIR}"/install_go.sh
# golang is used to compile go-based hooks
install_golang "${ARCH}"
install_docker
install_precommit
cleanup
