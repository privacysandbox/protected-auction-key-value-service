# Copyright 2023 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_cc//cc:defs.bzl", "cc_binary", "cc_library")
load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")

pkg_tar(
    name = "data_loading_analyzer_binaries",
    srcs = [
        ":data_loading_analyzer",
        "@google_privacysandbox_servers_common//src/aws/proxy:libnsm_and_proxify_tar",
    ],
    package_dir = "/opt/privacysandbox/bin",
)

# This image target is meant for testing running the server in an enclave using.
#
# See project README.md on how to run the image.
oci_image(
    name = "data_loading_analyzer_enclave_image",
    base = select({
        "@platforms//cpu:arm64": "@runtime-debian-debug-nonroot-arm64",
        "@platforms//cpu:x86_64": "@runtime-debian-debug-nonroot-amd64",
    }),
    cmd = [
        "/opt/privacysandbox/bin/proxify",
        "/opt/privacysandbox/bin/data_loading_analyzer",
    ],
    entrypoint = ["/bin/bash"],
    tars = [
        ":data_loading_analyzer_binaries",
    ],
)

oci_load(
    name = "data_loading_analyzer_enclave_tarball",
    image = ":data_loading_analyzer_enclave_image",
    repo_tags = ["bazel/components/tools:data_loading_analyzer_enclave"],
)

filegroup(
    name = "data_loading_analyzer_enclave_image.tar",
    srcs = [":data_loading_analyzer_enclave_tarball"],
    output_group = "tarball",
)

cc_binary(
    name = "data_loading_analyzer",
    srcs = ["data_loading_analyzer.cc"],
    visibility = ["//production/packaging:__subpackages__"],
    deps = [
        "//components/data/blob_storage:blob_storage_client",
        "//components/data/blob_storage:delta_file_notifier",
        "//components/data_server/cache",
        "//components/data_server/cache:key_value_cache",
        "//components/data_server/data_loading:data_orchestrator",
        "//components/tools/util:configure_telemetry_tools",
        "//components/udf:noop_udf_client",
        "//components/util:platform_initializer",
        "//public:base_types_cc_proto",
        "//public/data_loading:data_loading_fbs",
        "//public/data_loading/readers:riegeli_stream_io",
        "//public/data_loading/readers:riegeli_stream_record_reader_factory",
        "//public/sharding:key_sharder",
        "@com_github_google_flatbuffers//:flatbuffers",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "blob_storage_change_watcher",
    srcs = [
        "blob_storage_change_watcher_aws.cc",
    ],
    deps = [
        "//components/data/blob_storage:blob_storage_change_notifier",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
    ],
)

cc_library(
    name = "blob_storage_commands",
    srcs = ["blob_storage_commands.cc"],
    hdrs = ["blob_storage_commands.h"],
    deps = [
        "//components/data/blob_storage:blob_storage_client",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
    ],
)

cc_binary(
    name = "blob_storage_util",
    srcs = [
        "blob_storage_util.cc",
    ],
    deps = [
        ":blob_storage_commands",
        "//components/data/blob_storage:blob_storage_client",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
    ],
)

cc_binary(
    name = "delta_file_watcher",
    srcs = [
        "delta_file_watcher_aws.cc",
    ],
    deps = [
        "//components/data/blob_storage:blob_storage_client",
        "//components/data/blob_storage:delta_file_notifier",
        "//components/data/common:thread_manager",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
    ],
)

cc_binary(
    name = "delta_file_record_change_watcher",
    srcs = [
        "delta_file_record_change_watcher.cc",
    ],
    deps = [
        "//components/data/realtime:delta_file_record_change_notifier",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "//public/data_loading:data_loading_fbs",
        "//public/data_loading:filename_utils",
        "//public/data_loading:records_utils",
        "//public/data_loading/readers:riegeli_stream_io",
        "//public/data_loading/readers:riegeli_stream_record_reader_factory",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "get_region",
    srcs = ["get_region_aws.cc"],
    visibility = ["//production/packaging:__subpackages__"],
    deps = [
        "//components/errors:aws_error_util",
        "@aws_sdk_cpp//:core",
        "@aws_sdk_cpp//:ec2",
        "@com_google_absl//absl/cleanup",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "realtime_updates_publisher",
    srcs = ["realtime_updates_publisher.cc"],
    copts = select({
        "//:aws_platform": ["-DCLOUD_PLATFORM_AWS=1"],
        "//:gcp_platform": ["-DCLOUD_PLATFORM_GCP=1"],
        "//:local_platform": ["-DCLOUD_PLATFORM_LOCAL=1"],
        "//conditions:default": [],
    }),
    visibility = ["//production/packaging:__subpackages__"],
    deps = [
        ":concurrent_publishing_engine",
        "//components/util:platform_initializer",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "publisher_service",
    srcs = select({
        "//:gcp_platform": [
            "publisher_service_gcp.cc",
        ],
        "//:local_platform": [
            "publisher_service_local.cc",
        ],
        "//conditions:default": [
            "publisher_service_aws.cc",
        ],
    }),
    hdrs = [
        "publisher_service.h",
    ],
    copts = select({
        "//:aws_platform": ["-DCLOUD_PLATFORM_AWS=1"],
        "//:gcp_platform": ["-DCLOUD_PLATFORM_GCP=1"],
        "//conditions:default": [],
    }),
    deps = select({
        "//:gcp_platform": [
            "//components/errors:gcp_error_util",
            "//components/util:platform_initializer",
            "@com_github_googleapis_google_cloud_cpp//:pubsub",
        ],
        "//:local_platform": [
        ],
        "//conditions:default": [
            "//components/errors:aws_error_util",
            "@aws_sdk_cpp//:sns",
        ],
    }) + [
        "//components/data/common:message_service",
        "//components/tools/util:configure_telemetry_tools",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/status",
        "@com_google_absl//absl/status:statusor",
        "@com_google_absl//absl/strings",
    ],
)

cc_binary(
    name = "query_toy",
    srcs = [
        "query_dot.cc",
        "query_dot.h",
        "query_toy.cc",
    ],
    visibility = ["//production/packaging:__subpackages__"],
    deps = [
        "//components/query:driver",
        "//components/query:scanner",
        "@com_google_absl//absl/container:flat_hash_map",
        "@com_google_absl//absl/container:flat_hash_set",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/strings",
        "@google_privacysandbox_servers_common//src/util/status_macro:status_macros",
    ],
)

cc_binary(
    name = "realtime_notifier",
    srcs = ["realtime_notifier.cc"],
    copts = select({
        "//:aws_platform": ["-DCLOUD_PLATFORM_AWS=1"],
        "//:gcp_platform": ["-DCLOUD_PLATFORM_GCP=1"],
        "//:local_platform": ["-DCLOUD_PLATFORM_LOCAL=1"],
        "//conditions:default": [],
    }),
    deps = [
        ":publisher_service",
        "//components/data/realtime:realtime_notifier",
        "//components/tools/util:configure_telemetry_tools",
        "//components/util:platform_initializer",
        "//public/data_loading:data_loading_fbs",
        "//public/data_loading:filename_utils",
        "//public/data_loading:records_utils",
        "//public/data_loading/readers:riegeli_stream_io",
        "//public/data_loading/readers:riegeli_stream_record_reader_factory",
        "@com_google_absl//absl/flags:flag",
        "@com_google_absl//absl/flags:parse",
        "@com_google_absl//absl/flags:usage",
        "@com_google_absl//absl/log:flags",
        "@com_google_absl//absl/log:initialize",
        "@com_google_absl//absl/strings",
    ],
)

cc_library(
    name = "concurrent_publishing_engine",
    srcs = ["concurrent_publishing_engine.cc"],
    hdrs = [
        "concurrent_publishing_engine.h",
    ],
    visibility = ["//tools:__subpackages__"],
    deps = [
        ":publisher_service",
        "@com_google_absl//absl/log",
        "@com_google_absl//absl/strings",
        "@google_privacysandbox_servers_common//src/util:duration",
    ],
)
