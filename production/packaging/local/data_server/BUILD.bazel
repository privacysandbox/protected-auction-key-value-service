# Copyright 2024 Google LLC
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

load("@rules_oci//oci:defs.bzl", "oci_image", "oci_load")
load("@rules_pkg//pkg:mappings.bzl", "pkg_attributes", "pkg_files")
load("@rules_pkg//pkg:tar.bzl", "pkg_tar")
load("@rules_pkg//pkg:zip.bzl", "pkg_zip")

pkg_files(
    name = "server_executables",
    srcs = [
        "//components/data_server/server",
    ],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/server/bin",
)

server_binaries = [
    ":server_executables",
]

pkg_zip(
    name = "server_binaries",
    srcs = server_binaries,
)

pkg_tar(
    name = "server_binaries_tar",
    srcs = server_binaries,
)

# server artifacts
pkg_zip(
    name = "server_artifacts",
    srcs = server_binaries,
)

pkg_files(
    name = "init_server_with_profiler_execs",
    srcs = [
        ":init_server_with_profiler",
    ],
    attributes = pkg_attributes(mode = "0755"),
    prefix = "/server/bin",
)

pkg_tar(
    name = "init_server_with_profiler_tar",
    srcs = [
        ":init_server_with_profiler_execs",
    ],
)

# This image target is meant for cpu and memory profiling of the server.
oci_image(
    name = "server_profiling_docker_image",
    base = select({
        "@platforms//cpu:arm64": "@runtime-ubuntu-fulldist-debug-root-arm64",
        "@platforms//cpu:x86_64": "@runtime-ubuntu-fulldist-debug-root-amd64",
    }),
    cmd = [
        "/server/bin/init_server_with_profiler",
    ],
    entrypoint = ["/bin/bash"],
    tars = [
        ":server_binaries_tar",
        ":init_server_with_profiler_tar",
    ],
)

oci_load(
    name = "server_profiling_docker_tarball",
    image = ":server_profiling_docker_image",
    repo_tags = ["bazel/production/packaging/local/data_server:server_profiling_docker_image"],
)

filegroup(
    name = "server_profiling_docker_image.tar",
    srcs = [":server_profiling_docker_tarball"],
    output_group = "tarball",
)

# This image target is meant for testing running the server in an enclave using.
#
# See project README.md on how to run the image.
oci_image(
    name = "server_docker_image",
    base = select({
        "@platforms//cpu:arm64": "@runtime-debian-debug-nonroot-arm64",
        "@platforms//cpu:x86_64": "@runtime-debian-debug-nonroot-amd64",
    }),
    entrypoint = [
        "/server/bin/server",
        "--port=50051",
        "--delta_directory=/data",
        "--realtime_directory=/data/realtime",
        "--stderrthreshold=0",
    ],
    tars = [
        ":server_binaries_tar",
    ],
)

oci_load(
    name = "server_docker_tarball",
    image = ":server_docker_image",
    repo_tags = ["bazel/production/packaging/local/data_server:server_docker_image"],
)

filegroup(
    name = "server_docker_image.tar",
    srcs = [":server_docker_tarball"],
    output_group = "tarball",
)

genrule(
    name = "copy_to_dist",
    srcs = [
        ":server_docker_image.tar",
        ":server_artifacts",
        "//public/query:query_api_descriptor_set",
    ],
    outs = ["copy_to_dist.bin"],
    cmd_bash = """cat << EOF > '$@'
mkdir -p dist/debian
cp $(execpath :server_artifacts) dist/debian
cp $(execpath :server_docker_image.tar) dist/server_docker_image.tar
cp $(execpath //public/query:query_api_descriptor_set) dist
# retain previous server_docker_image.tar location as a symlink
ln -rsf dist/server_docker_image.tar dist/debian/server_docker_image.tar
builders/tools/normalize-dist
EOF""",
    executable = True,
    local = True,
    message = "copying server artifacts to dist directory",
)
