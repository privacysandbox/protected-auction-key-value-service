#!/usr/bin/env bash

# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# environment variables (all optional):
#   WORKSPACE           repo root directory, must be an absolute path
#   DOCKER_NETWORK      docker run --network arg, defaults to "host", set to
#                       blank to avoid setting --network

set -o errexit

APP="$(basename "${BASH_SOURCE[0]}")"
readonly APP
APP_LINK_TARGET=$(readlink "${BASH_SOURCE[0]}") || true
readonly APP_LINK_TARGET
if [[ -z ${APP_LINK_TARGET} ]] || [[ ${APP_LINK_TARGET} == test-tool && ${APP} =~ ^(release|utils|coverage)-tool$ ]]; then
  printf "%s designed for use via symlink with target program name\n" "${APP}" >/dev/stderr
  exit 1
fi

declare -i APP_AS_ENTRYPOINT=0

case "${APP_LINK_TARGET}" in
  release-tool)
    IMAGE="release"
    APP_AS_ENTRYPOINT=1
    ;;
  coverage-tool)
    IMAGE="coverage-tools" ;;
  test-tool)
    IMAGE="test-tools" ;;
  utils-tool)
    IMAGE="utils" ;;
  *)
    printf "Unsupported image target: %s\n" "${APP_LINK_TARGET}" >/dev/stderr
    exit 1
esac
readonly IMAGE

# shellcheck disable=SC1090
source "$(dirname "$(readlink -f "${BASH_SOURCE[0]}")")"/builder.sh
TOOLS_DIR="$(builder::get_tools_dir)"
readonly TOOLS_DIR
IMAGE_TAGGED="$("${TOOLS_DIR}"/get-builder-image-tagged --image "${IMAGE}")"
readonly IMAGE_TAGGED

REL_PWD="$(realpath --relative-to="${WORKSPACE}" "$(pwd)")"
readonly REL_PWD
WORKSPACE_MOUNT="$(builder::get_docker_workspace_mount)"
readonly WORKSPACE_MOUNT

# respect an empty DOCKER_NETWORK value
DOCKER_NETWORK=${DOCKER_NETWORK-host}

declare -a DOCKER_RUN_ARGS=(
  "--rm"
  "--interactive"
  "--user=$(id -u):$(id -g)"
  "--volume=${WORKSPACE_MOUNT}:/src/workspace"
  "--workdir=/src/workspace/${REL_PWD}"
)
if [[ -n ${DOCKER_NETWORK} ]]; then
  DOCKER_RUN_ARGS+=(
    "--network=${DOCKER_NETWORK}"
  )
fi
if [[ -n ${EXTRA_DOCKER_RUN_ARGS} ]]; then
  # shellcheck disable=SC2207
  DOCKER_RUN_ARGS+=(
    $(echo "${EXTRA_DOCKER_RUN_ARGS}" | envsubst)
  )
fi
if [[ -t 0 ]] && [[ -t 1 ]]; then
  # stdin and stdout are open, assume it's an interactive tty session
  DOCKER_RUN_ARGS+=("--tty")
fi
if [[ ${APP_AS_ENTRYPOINT} -eq 1 ]]; then
  # shellcheck disable=SC2068
  docker run \
    "${DOCKER_RUN_ARGS[@]}" \
    --entrypoint="${APP}" \
    "${IMAGE_TAGGED}" \
    "$@"
else
  # shellcheck disable=SC2068
  docker run \
    "${DOCKER_RUN_ARGS[@]}" \
    "${IMAGE_TAGGED}" \
    "${APP}" "$@"
fi
